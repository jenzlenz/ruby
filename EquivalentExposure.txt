Apertures
1.2, 1.4, 2.8, 4.0, 5.6, 8, 11, 16, 22, 32
 
ISOs
100, 200, 400, 800, 1600, 3200, 6400
 
Shutter Speeds
30, 15, 8, 4, 2, 1, 1/2, 1/4, 18, 15, 1/30, 1/60, 1/125, 1/500, 1/1000, 1/2000, 1/4000
 
 
Step 1
Define aperture, ISO, shutter arrays
Calc the length of each array
 
Step 2
Ask user what the current exposure is, ask ISO, Shutter, aperture
Store those answers, say it's
Current_ISO= "200", this is ISO[1]
Current_Aperture= "8", this is aperture[5]
Current_shutter = "1/60" this is shutter[11]
 
Array.include? Will return true if the value is in the array, false if it isn't
 
Step 3
Determine the current index position of each of these in their respective arrays, by looping within each array, asking if the value I equal until it is then break out of loop, store the current index position in each array
Array.each_index will return the index position of the element in the array
 
Step 4
For any given exposure there are many equivalents, so ask user if they want a list of equiv exposures
OR
ask how many stops are desired, to get two additional equivalents 
Store this in desired_stop_eqiv
Convert to an integer desired_stop_equivalent.to_int so we can use it for math
 
Step 5
Keep the arrays in the same order, so for ex,
ISO is the first array,
Aperture is the second,
Shutter is the third
 
Iterate
ISO constant, aperture +1, shutter -1
ISO -1, aperture constant, shutter +1
ISO +1, aperture -1, shutter constant
 
For each array, take the index position and add the desired_stop_equiv to it
To find one stop equivalent, you need to +1 index on one array and -1 index on another array, you could do the following:
 
Option 1
ISO=200, aperture = "11" and shutter = "1/30"
ISO [1], aperture[6], shutter[10]
Puts "One possibility for 1 stop equivalent is
Option 2
ISO=100, aperture = "8", shutter = "1/125"
ISO[0], aperture[5], shutter[12]
Puts "A second possibility for a 1 stop equivalent is
Option 3
ISO=400, aperture = "5.6", shutter = "1/60"
ISO[2], aperture[4], shutter[11]
Puts "A third possibility for a 1 stop equivalent is
  